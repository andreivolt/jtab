name: Build

on:
  workflow_dispatch:

jobs:
  precheck:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.vars.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Version
        id: vars
        shell: bash
        run: |
          version=$(sed -n 's/^version = "\(.*\)"/\1/p' Cargo.toml | head -n1)
          echo ::set-output name=VERSION::$(echo "$version")

  build:
    needs: [ precheck ]
    name: 'Build ${{ matrix.job.target }}'
    strategy:
      fail-fast: true
      matrix:
        job:
          - { target: aarch64-apple-darwin     , os: macos-latest  ,                  jreleaser_platform: osx-aarch_64   }
          - { target: x86_64-apple-darwin      , os: macos-latest  ,                  jreleaser_platform: osx-x86_64     }
          - { target: x86_64-pc-windows-msvc   , os: windows-latest,                  jreleaser_platform: windows-x86_64 }
          - { target: x86_64-unknown-linux-gnu , os: ubuntu-latest ,                  jreleaser_platform: linux-x86_64   }
          - { target: aarch64-unknown-linux-gnu, os: ubuntu-latest , use-cross: true, jreleaser_platform: linux-aarch_64 }
    runs-on: ${{ matrix.job.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}
          override: true
          profile: minimal

      - uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.job.use-cross }}
          command: build
          args: --locked --release --target=${{ matrix.job.target }}

      - name: Assemble
        uses: jreleaser/release-action@v2
        with:
          arguments: assemble
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.precheck.outputs.VERSION }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_PLATFORM_OVERRIDE: ${{ matrix.job.jreleaser_platform }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          retention-days: 1
          name: artifacts
          path: |
            out/jreleaser/assemble/jtab/archive/*.zip

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          retention-days: 1
          name: jreleaser-${{ matrix.job.target }}
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties

  universal:
    name: 'Build all-apple-darwin'
    needs: [ precheck, build ]
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Build binary
        shell: bash
        run: |
          mkdir -p target/all-apple-darwin/release
          cd artifacts
          unzip -q jtab-${{ needs.precheck.outputs.VERSION }}-x86_64-apple-darwin.zip
          unzip -q jtab-${{ needs.precheck.outputs.VERSION }}-aarch64-apple-darwin.zip
          lipo -create jtab-${{ needs.precheck.outputs.VERSION }}-x86_64-apple-darwin/bin/jtab \
            jtab-${{ needs.precheck.outputs.VERSION }}-aarch64-apple-darwin/bin/jtab \
            -output ../target/all-apple-darwin/release/jtab

      - name: Assemble
        uses: jreleaser/release-action@v2
        with:
          arguments: assemble
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.precheck.outputs.VERSION }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_PLATFORM_OVERRIDE: osx

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          retention-days: 1
          name: artifacts
          path: |
            out/jreleaser/assemble/jtab/archive/*.zip

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          retention-days: 1
          name: jreleaser-all-apple-darwin
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties

  release:
    needs: [ precheck, universal ]
    if: endsWith(${{ needs.precheck.outputs.VERSION }}, '-SNAPSHOT')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Release
        uses: jreleaser/release-action@v2
        with:
          arguments: release -PartifactsDir=artifacts -PskipArchiveResolver
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.precheck.outputs.VERSION }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          retention-days: 1
          name: jreleaser-release
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties